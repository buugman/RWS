/* 
 * File:   ironlib.h
 * Author: buugman
 *
 * Created on March 28, 2011, 10:02 PM
 *
 * Библиотека ironlib.so предназначена для развертывания клиент-серверных решений
 * на платформе Linux. Включает в себя протокол связи между клиентом и сервером,
 * протокол обмена сообщениями, клиент и сервер.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <dirent.h>
#include <pthread.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <openssl/md5.h>
#include <netdb.h>
#include <dlfcn.h>
#include <list.h>

#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/errno.h>
#include <sys/signal.h>
#include <sys/wait.h>
#include <sys/sendfile.h>
#include <sys/stat.h>


#define  CCOUNT         64*1024     /*Количество подключений*/
#define  QLEN           32          /*Длинна очереди запросов*/
#define SVPORT          "7777"      /*Порт на котором работает сервер*/

#define UDP_SERV  0                
#define TCP_SERV  1
#define NOSOCK   -1

#define BUFSIZE                 4096
#define TASKNAME                "libTask.so"
#define GETNEWPART              "getnewpart"
#define GETTASK                 "getmetask"
#define CALCGOOD                "calculate_good"
#define CALCBAD                 "calculate_bad"

#ifndef MAX
#define MAX(x,y)  ((x)>(y) ? (x) : (y))
#endif  /* MAX */

extern int errno;

/*********************
 * Структура сервиса
 *      порт
 *      флаг какой протокол использовать 1-TCP 0-UDP
 *      дескриптор сокета
 *      функция сервиса - что должен выполнять
 ********************/
struct service
{
  char *sv_name;
  char sv_useTCP;
  int sv_sock;
  int (*sv_func)(unsigned int);
};

/*********************
 * Структура сообщения
 *      входящее сообщение
 *      исходящее сообщение
 *      имя файла
 *      дескриптор файла
 *      размер файла
 *      дескриптор сокета !!!НЕ ИСПОЛЬЗУЕТСЯ В ПЕРЕДАННЫХ СООБЩЕНИЯХ!!!
 *      идентификатор пользователя
 *********************/

struct msg
{
  char inpmsg[BUFSIZE+1];                   /*Входящее сообщение*/
  char outmsg[BUFSIZE+1];                   /*Исходящее сообщение*/
  char *flname;                             /*Имя файла*/
  unsigned int flfd;                        /*Файловый дескриптор*/
  off_t flsize;                             /*Размер файла*/
  unsigned int skfd;                        /*Сокет подключения*/
  unsigned char hashid[MD5_DIGEST_LENGTH];  /*id клиента*/
};

/*********************************
 * Структура информации о клиенте
 * *******************************/
struct clinfo
{
  unsigned char hash[MD5_DIGEST_LENGTH];
  unsigned int cpu;
  struct list_head list;
};


int errexit(const char *format,...); /*функция проверки ошибок*/

/*************************************************************************
 * 
 *        Функции отвечающие за подключение
 *
 *************************************************************************/

/*----------------------------------------------------------------------
 * Процедура passivesock - распределяет и подключает серверный сокет
 *	 		   с использованием протокола TCP или UDP
 *----------------------------------------------------------------------
 * Параметры :
 *	service   - служба, связанная с требуемым портом или порт
 * 	transport - имя используемого транспортного протокола ("tcp" или "udp")
 *	qlen      - максимальная длина очереди запросов на подключение к
 *                  серверу
 *----------------------------------------------------------------------
 */
int passivesock(const char *service, const char *transport, int qlen);

/*---------------------------------------------------------------------
 * Процедура passiveTCP - создает пассивный сокет для использования
 *			  в сервере TCP
 *---------------------------------------------------------------------
 */
int passiveTCP(const char *service);

/*--------------------------------------------------------------------
 * Процедура passiveUDP - создает пассивный сокет для использования
 * 			  в сервере UDP
 *--------------------------------------------------------------------
 */
int passiveUDP(const char *service);

/*---------------------------------------------------------------------------
 * Процедура connectsock -распределяет и подключает сокет с
 * использованием протокола TCP  или UDP
 *---------------------------------------------------------------------------
 * Входные параметры
 * 	host - имя хоста, к которому должно быть выполнено подключение
 *	service - служба, связанная с требуемым портом
 *	transport - имя используемого транспортного протокола ("tcp" или "udp")
 *---------------------------------------------------------------------------
 */
int connectsock(const char *host, const char *service, const char *transport);

/*------------------------------------------------------------------------
 * Процедура connectTCP - выполняет подключение к указанной службе TCP
 * на указанном хосте.
 *------------------------------------------------------------------------
 * Параметры :
 * 	host    - имя хоста, к которому должно быть выполнено подключение
 *	service - служба, связанная с требуемым портом
 *------------------------------------------------------------------------
 */
int connectTCP(const char *host, const char *service);

/*--------------------------------------------------------------------------
 * Процедура connectUDP - выполняет подключение к указаной службе UDP на
 * указанном хосте.
 *--------------------------------------------------------------------------
 * Параметры :
 * 	host	- имя хоста, к которому должно быть выполнено подключение
 *	service - служба, связанная с требуемым портом
 *--------------------------------------------------------------------------
 */
int connectUDP(const char *host, const char *service);

/* ---------------------------------------------------------------------------
 * Процедура getTCP - принимает сокет готовый к чтению, accept и создает поток
 * в котором будет обрабатываться соединение, чтение и отправка сообщений.
 * ---------------------------------------------------------------------------
 * Параметры :
 *      *psv - указатель на структуру сервиса.
 *      *clbase - указатель на список клиентов.
 */
void getTCP(struct service *psv, struct clinfo *clbase);

/*****************************************************************************
 *
 * Функции ввода вывода для работы с файлами и дескрипторами
 * сокетов, для посылки сообщений.
 *
 * ***************************************************************************/


/*----------------------------------------------------------------------------
 * Функция openfd - возвращает файловый дескриптор ассоциированный с файлои
 *----------------------------------------------------------------------------
 * Параметры :
 *      filename - имя файла
 *      flag - O_CREAT | O_RDONLY | O_RDWR и т.д.
 */
int openfd(const char *filename, int flag);

/*----------------------------------------------------------------------------
 * Функция closefd - закрывает файловый дескриптор
 * ---------------------------------------------------------------------------
 * Параметры :
 *      ffd - файловый дескриптор
 */
int closefd(unsigned int ffd);

/*----------------------------------------------------------------------------
 * Функция readbuf - считывает из файлового дескриптора в буфер данные размером
 * bytes
 * ---------------------------------------------------------------------------
 * Параметры :
 *      rfd - дескриптор для чтения
 *      buf - указатель куда читать
 *      bytes - сколько байт читать
 * Возвращаемое значение количество считанных байт.
 */
size_t readbuf(unsigned int rfd, void *buf, size_t bytes);

/*----------------------------------------------------------------------------
 * Функция writebuf - записывает в буфер данные размером bytes
 * ---------------------------------------------------------------------------
 * Параметры :
 *      wfd - дескриптор для записи
 *      buf - указатель куда писать
 *      bytes - сколько байт писать
 * Возвращаемое значение количество записанных байт.
 */
size_t writebuf(unsigned int wfd, void *buf, size_t bytes);

/*----------------------------------------------------------------------------
 * Функция copy - копирует файлы
 * ---------------------------------------------------------------------------
 * Парметры :
 *      filename - файл источник
 *      destination - файл приемник
 */
int copy(const char *filename, const char *destination);

/*****************************************************************************
 *
 * Функции обмена сообщениями между клиентом и сервером.
 *
 * ***************************************************************************/
int sendmessage(struct msg *pmsg); /*отправляет структуру msg в качестве сообщения*/
int getmessage(struct msg *pmsg); /*принимает структуру в качестве входящего сообщения*/
int parsemessage(struct msg *pmsg); /*парсит структуру с сообщением в зависимости от того какое сообщение выполняет действия клиента.*/
int getdata(struct msg *pmsg);
int senddata(struct msg *pmsg);
size_t* usrdatagen(struct msg *pmsg);


/*****************************************************************************
 *
 * Функции отвечающие за запуск сервера и клиента.
 *
 * ***************************************************************************/
int StartClient(const char *svs, const char *mes, struct clinfo clinf);
/*Вычислительный клиент*/
void StartServer(void);
/*Сервер*/
int msgservice(unsigned int fd); /*Сервис обрабатывающий запросы клиентов на сервере*/
int comparehashid( unsigned char msg[MD5_DIGEST_LENGTH], unsigned char cl[MD5_DIGEST_LENGTH]);
