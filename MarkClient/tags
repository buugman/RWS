!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BFLAGS	Makefile	/^BFLAGS = -g -fPIC  -Wall -pedantic$/;"	m
BIN	Makefile	/^BIN=.\/bin$/;"	m
BUFSIZE	hdr/MarkIO.h	37;"	d
CC	Makefile	/^CC =g++$/;"	m
CD	Makefile	/^CD = cd$/;"	m
CFLAGS	Makefile	/^CFLAGS = -c -g -fPIC  -Wall -pedantic$/;"	m
CLDONE	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
CLFAILURE	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
CP	Makefile	/^CP = cp$/;"	m
ConnectSocket	hdr/protocol.h	/^		int ConnectSocket(const char* host, const char* service, const char* transport);$/;"	p	class:Protocol	access:private	signature:(const char* host, const char* service, const char* transport)
ConnectTCP	hdr/protocol.h	/^		int ConnectTCP(const char* host, const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* host, const char* service)
ConnectUDP	hdr/protocol.h	/^		int ConnectUDP(const char* host, const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* host, const char* service)
GETMETASK	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
GETNEWPART	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
GetTCP	hdr/protocol.h	/^		int GetTCP(struct ServiceInfo *psv);$/;"	p	class:Protocol	access:public	signature:(struct ServiceInfo *psv)
Get_MCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int Get_MCPUFrequency() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
Get_MCoreNumber	hdr/MarkClInfo.h	/^	unsigned int Get_MCoreNumber() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
Get_MFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int Get_MFreeMemory() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
Get_MGuid	hdr/MarkClInfo.h	/^	string Get_MGuid() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
Get_MTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int Get_MTotalMemory() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
Get_MUpTime	hdr/MarkClInfo.h	/^	unsigned int Get_MUpTime() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
HDR	Makefile	/^HDR=.\/hdr$/;"	m
LFLAGS	Makefile	/^LFLAGS = -shared -g -ldl -o $/;"	m
LIB	Makefile	/^LIB=.\/lib$/;"	m
LIBPROJECT	Makefile	/^LIBPROJECT = ..\/MarkI$/;"	m
MAKE	Makefile	/^MAKE = make$/;"	m
MARKCALCDATA_H	hdr/MarkCalcData.h	27;"	d
MARKCLIENT_H	hdr/MarkClient.h	27;"	d
MARKCLINFO_H	hdr/MarkClInfo.h	27;"	d
MARKIO_H	hdr/MarkIO.h	27;"	d
MARKMSGPROTOCOL_H	hdr/MarkMSGProtocol.h	30;"	d
MARKMSGTYPES_H	hdr/MarkMSGTypes.h	27;"	d
MARKSERVER_H	hdr/MarkServer.h	27;"	d
MARKTHREADFUNCTIONS_H	hdr/MarkThreadFunctions.h	27;"	d
MARKTHREADS_H	hdr/MarkThreads.h	27;"	d
MCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int MCPUFrequency;$/;"	m	class:MarkClInfo_t	access:private
MClientInfo	hdr/MarkClient.h	/^	MarkClInfo_t* MClientInfo;$/;"	m	class:MarkClient_t	access:private
MClientInformation	hdr/MarkMSGTypes.h	/^	MarkClInfo_t* MClientInformation;$/;"	m	class:MarkMSGTypes_t	access:private
MCoreNumber	hdr/MarkClInfo.h	/^	unsigned int MCoreNumber;$/;"	m	class:MarkClInfo_t	access:private
MFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int MFreeMemory;$/;"	m	class:MarkClInfo_t	access:private
MGet_Masocket	hdr/MarkMSGTypes.h	/^	unsigned int MGet_Masocket();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
MGuid	hdr/MarkClInfo.h	/^	string MGuid;$/;"	m	class:MarkClInfo_t	access:private
MInitClientInfo	hdr/MarkClInfo.h	/^	void MInitClientInfo();$/;"	p	class:MarkClInfo_t	access:public	signature:()
MMSGProto	hdr/MarkClient.h	/^	MarkMSGProtocol_t* MMSGProto;$/;"	m	class:MarkClient_t	access:private
MNetProto	hdr/MarkClient.h	/^	Protocol* MNetProto;$/;"	m	class:MarkClient_t	access:private
MSInfo	hdr/protocol.h	/^		ServiceInfo MSInfo;$/;"	m	class:Protocol	access:public
MSet_Masocket	hdr/MarkMSGTypes.h	/^	void MSet_Masocket(unsigned int value);$/;"	p	class:MarkMSGTypes_t	access:public	signature:(unsigned int value)
MSolvedData	hdr/MarkMSGTypes.h	/^	MarkCalcData_t* MSolvedData;$/;"	m	class:MarkMSGTypes_t	access:private
MThreadFunction	hdr/MarkThreads.h	/^	static	void *MThreadFunction(MarkMSGTypes_t* MTypes);$/;"	p	class:MarkThreads_t	access:private	signature:(MarkMSGTypes_t* MTypes)
MTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int MTotalMemory;$/;"	m	class:MarkClInfo_t	access:private
MUpTime	hdr/MarkClInfo.h	/^	unsigned int MUpTime;$/;"	m	class:MarkClInfo_t	access:private
MV	Makefile	/^MV = mv$/;"	m
MarkCalcData_t	hdr/MarkCalcData.h	/^	MarkCalcData_t ();$/;"	p	class:MarkCalcData_t	access:public	signature:()
MarkCalcData_t	hdr/MarkCalcData.h	/^class MarkCalcData_t {$/;"	c
MarkCalcData_t::MarkCalcData_t	hdr/MarkCalcData.h	/^	MarkCalcData_t ();$/;"	p	class:MarkCalcData_t	access:public	signature:()
MarkCalcData_t::MarkCalculate	hdr/MarkCalcData.h	/^	void  MarkCalculate(); $/;"	p	class:MarkCalcData_t	access:public	signature:()
MarkCalcData_t::~MarkCalcData_t	hdr/MarkCalcData.h	/^	virtual ~MarkCalcData_t ();$/;"	p	class:MarkCalcData_t	access:public	signature:()
MarkCalculate	hdr/MarkCalcData.h	/^	void  MarkCalculate(); $/;"	p	class:MarkCalcData_t	access:public	signature:()
MarkClInfo_t	hdr/MarkClInfo.h	/^	MarkClInfo_t();$/;"	p	class:MarkClInfo_t	access:public	signature:()
MarkClInfo_t	hdr/MarkClInfo.h	/^class MarkClInfo_t {$/;"	c
MarkClInfo_t::Get_MCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int Get_MCPUFrequency() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::Get_MCoreNumber	hdr/MarkClInfo.h	/^	unsigned int Get_MCoreNumber() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::Get_MFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int Get_MFreeMemory() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::Get_MGuid	hdr/MarkClInfo.h	/^	string Get_MGuid() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::Get_MTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int Get_MTotalMemory() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::Get_MUpTime	hdr/MarkClInfo.h	/^	unsigned int Get_MUpTime() const;$/;"	p	class:MarkClInfo_t	access:public	signature:() const
MarkClInfo_t::MCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int MCPUFrequency;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MCoreNumber	hdr/MarkClInfo.h	/^	unsigned int MCoreNumber;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int MFreeMemory;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MGuid	hdr/MarkClInfo.h	/^	string MGuid;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MInitClientInfo	hdr/MarkClInfo.h	/^	void MInitClientInfo();$/;"	p	class:MarkClInfo_t	access:public	signature:()
MarkClInfo_t::MTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int MTotalMemory;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MUpTime	hdr/MarkClInfo.h	/^	unsigned int MUpTime;$/;"	m	class:MarkClInfo_t	access:private
MarkClInfo_t::MarkClInfo_t	hdr/MarkClInfo.h	/^	MarkClInfo_t();$/;"	p	class:MarkClInfo_t	access:public	signature:()
MarkClInfo_t::MarkGetCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int MarkGetCPUFrequency();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::MarkGetCoreNumber	hdr/MarkClInfo.h	/^	unsigned int MarkGetCoreNumber();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::MarkGetFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int MarkGetFreeMemory();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::MarkGetGuid	hdr/MarkClInfo.h	/^	string MarkGetGuid();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::MarkGetTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int MarkGetTotalMemory();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::MarkGetUpTime	hdr/MarkClInfo.h	/^	unsigned int MarkGetUpTime();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkClInfo_t::~MarkClInfo_t	hdr/MarkClInfo.h	/^	virtual ~MarkClInfo_t();$/;"	p	class:MarkClInfo_t	access:public	signature:()
MarkClientMsg_t	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	g	class:MarkMSGTypes_t	access:public
MarkClient_t	hdr/MarkClient.h	/^	MarkClient_t (MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue);$/;"	p	class:MarkClient_t	access:public	signature:(MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)
MarkClient_t	hdr/MarkClient.h	/^class MarkClient_t {$/;"	c
MarkClient_t	src/MarkClient.cpp	/^ MarkClient_t::MarkClient_t (MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)$/;"	f	class:MarkClient_t	signature:(MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)
MarkClient_t::MClientInfo	hdr/MarkClient.h	/^	MarkClInfo_t* MClientInfo;$/;"	m	class:MarkClient_t	access:private
MarkClient_t::MMSGProto	hdr/MarkClient.h	/^	MarkMSGProtocol_t* MMSGProto;$/;"	m	class:MarkClient_t	access:private
MarkClient_t::MNetProto	hdr/MarkClient.h	/^	Protocol* MNetProto;$/;"	m	class:MarkClient_t	access:private
MarkClient_t::MarkClient_t	hdr/MarkClient.h	/^	MarkClient_t (MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue);$/;"	p	class:MarkClient_t	access:public	signature:(MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)
MarkClient_t::MarkClient_t	src/MarkClient.cpp	/^ MarkClient_t::MarkClient_t (MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)$/;"	f	class:MarkClient_t	signature:(MarkClInfo_t& InfoValue, MarkMSGProtocol_t& MSGProtoValue, Protocol& ProtoValue)
MarkClient_t::MarkStartClient	hdr/MarkClient.h	/^	void MarkStartClient();$/;"	p	class:MarkClient_t	access:public	signature:()
MarkClient_t::MarkStartClient	src/MarkClient.cpp	/^ void MarkClient_t::MarkStartClient()$/;"	f	class:MarkClient_t	signature:()
MarkClient_t::~MarkClient_t	hdr/MarkClient.h	/^	virtual ~MarkClient_t ();$/;"	p	class:MarkClient_t	access:public	signature:()
MarkClient_t::~MarkClient_t	src/MarkClient.cpp	/^ MarkClient_t::~MarkClient_t ()$/;"	f	class:MarkClient_t	signature:()
MarkClosefd	hdr/MarkIO.h	/^	int MarkClosefd(unsigned int ffd);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int ffd)
MarkCopyfile	hdr/MarkIO.h	/^	int MarkCopyfile(const char *filename, const char *destination);$/;"	p	class:MarkIO_t	access:public	signature:(const char *filename, const char *destination)
MarkGetCPUFrequency	hdr/MarkClInfo.h	/^	unsigned long int MarkGetCPUFrequency();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkGetCoreNumber	hdr/MarkClInfo.h	/^	unsigned int MarkGetCoreNumber();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkGetFreeMemory	hdr/MarkClInfo.h	/^	unsigned long int MarkGetFreeMemory();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkGetGuid	hdr/MarkClInfo.h	/^	string MarkGetGuid();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkGetTotalMemory	hdr/MarkClInfo.h	/^	unsigned long int MarkGetTotalMemory();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkGetUpTime	hdr/MarkClInfo.h	/^	unsigned int MarkGetUpTime();$/;"	p	class:MarkClInfo_t	access:private	signature:()
MarkIOBuffer	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
MarkIO_t	hdr/MarkIO.h	/^	MarkIO_t ();$/;"	p	class:MarkIO_t	access:public	signature:()
MarkIO_t	hdr/MarkIO.h	/^class MarkIO_t {$/;"	c
MarkIO_t::MarkClosefd	hdr/MarkIO.h	/^	int MarkClosefd(unsigned int ffd);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int ffd)
MarkIO_t::MarkCopyfile	hdr/MarkIO.h	/^	int MarkCopyfile(const char *filename, const char *destination);$/;"	p	class:MarkIO_t	access:public	signature:(const char *filename, const char *destination)
MarkIO_t::MarkIOBuffer	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::MarkIO_t	hdr/MarkIO.h	/^	MarkIO_t ();$/;"	p	class:MarkIO_t	access:public	signature:()
MarkIO_t::MarkOpenfd	hdr/MarkIO.h	/^	int MarkOpenfd(const char *filename, int flag);$/;"	p	class:MarkIO_t	access:public	signature:(const char *filename, int flag)
MarkIO_t::MarkReadBuf	hdr/MarkIO.h	/^	size_t MarkReadBuf(unsigned int rfd, void *buf, size_t bytes);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int rfd, void *buf, size_t bytes)
MarkIO_t::MarkWriteBuf	hdr/MarkIO.h	/^	size_t MarkWriteBuf(unsigned int wfd, void *buf, size_t bytes);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int wfd, void *buf, size_t bytes)
MarkIO_t::Mffd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::Minfd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::Moutfd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::Mreadbytes	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::Mwritebytes	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
MarkIO_t::buffer	hdr/MarkIO.h	/^	char buffer[BUFSIZE+1];$/;"	m	class:MarkIO_t	access:private
MarkIO_t::errexit	hdr/MarkIO.h	/^	void errexit(const char* format, ...);$/;"	p	class:MarkIO_t	access:public	signature:(const char* format, ...)
MarkIO_t::~MarkIO_t	hdr/MarkIO.h	/^	virtual ~MarkIO_t ();$/;"	p	class:MarkIO_t	access:public	signature:()
MarkMSGProtocol_t	hdr/MarkMSGProtocol.h	/^	MarkMSGProtocol_t();$/;"	p	class:MarkMSGProtocol_t	access:public	signature:()
MarkMSGProtocol_t	hdr/MarkMSGProtocol.h	/^class MarkMSGProtocol_t : private MarkIO_t $/;"	c	inherits:MarkIO_t
MarkMSGProtocol_t::MarkMSGProtocol_t	hdr/MarkMSGProtocol.h	/^	MarkMSGProtocol_t();$/;"	p	class:MarkMSGProtocol_t	access:public	signature:()
MarkMSGProtocol_t::MarkRecive	hdr/MarkMSGProtocol.h	/^	int MarkRecive(void* Data, char flag, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:public	signature:(void* Data, char flag, const unsigned int fd)
MarkMSGProtocol_t::MarkSend	hdr/MarkMSGProtocol.h	/^	int MarkSend(void* Data, char flag, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:public	signature:(void* Data, char flag, const unsigned int fd)
MarkMSGProtocol_t::Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const MarkCalcData_t* MData, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkCalcData_t* MData, const unsigned int fd)
MarkMSGProtocol_t::Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const MarkClInfo_t* MClientInfo, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkClInfo_t* MClientInfo, const unsigned int fd)
MarkMSGProtocol_t::Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const unsigned int MsgNum, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const unsigned int MsgNum, const unsigned int fd)
MarkMSGProtocol_t::Send	hdr/MarkMSGProtocol.h	/^	int Send(const MarkCalcData_t* MData, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkCalcData_t* MData, const unsigned int fd)
MarkMSGProtocol_t::Send	hdr/MarkMSGProtocol.h	/^	int Send(const MarkClInfo_t* MClientInfo, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkClInfo_t* MClientInfo, const unsigned int fd)
MarkMSGProtocol_t::Send	hdr/MarkMSGProtocol.h	/^	int Send(const unsigned int MsgNum, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const unsigned int MsgNum, const unsigned int fd)
MarkMSGProtocol_t::~MarkMSGProtocol_t	hdr/MarkMSGProtocol.h	/^	virtual ~MarkMSGProtocol_t();$/;"	p	class:MarkMSGProtocol_t	access:public	signature:()
MarkMSGTypes_t	hdr/MarkMSGTypes.h	/^	MarkMSGTypes_t();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
MarkMSGTypes_t	hdr/MarkMSGTypes.h	/^class MarkMSGTypes_t : public MarkMSGProtocol_t$/;"	c	inherits:MarkMSGProtocol_t
MarkMSGTypes_t::CLDONE	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
MarkMSGTypes_t::CLFAILURE	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
MarkMSGTypes_t::GETMETASK	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
MarkMSGTypes_t::GETNEWPART	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
MarkMSGTypes_t::MClientInformation	hdr/MarkMSGTypes.h	/^	MarkClInfo_t* MClientInformation;$/;"	m	class:MarkMSGTypes_t	access:private
MarkMSGTypes_t::MGet_Masocket	hdr/MarkMSGTypes.h	/^	unsigned int MGet_Masocket();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
MarkMSGTypes_t::MSet_Masocket	hdr/MarkMSGTypes.h	/^	void MSet_Masocket(unsigned int value);$/;"	p	class:MarkMSGTypes_t	access:public	signature:(unsigned int value)
MarkMSGTypes_t::MSolvedData	hdr/MarkMSGTypes.h	/^	MarkCalcData_t* MSolvedData;$/;"	m	class:MarkMSGTypes_t	access:private
MarkMSGTypes_t::MarkClientMsg_t	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	g	class:MarkMSGTypes_t	access:public
MarkMSGTypes_t::MarkMSGTypes_t	hdr/MarkMSGTypes.h	/^	MarkMSGTypes_t();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
MarkMSGTypes_t::Masocket	hdr/MarkMSGTypes.h	/^	unsigned int Masocket;$/;"	m	class:MarkMSGTypes_t	access:private
MarkMSGTypes_t::SHUTDOWN	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
MarkMSGTypes_t::~MarkMSGTypes_t	hdr/MarkMSGTypes.h	/^	virtual ~MarkMSGTypes_t();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
MarkOpenfd	hdr/MarkIO.h	/^	int MarkOpenfd(const char *filename, int flag);$/;"	p	class:MarkIO_t	access:public	signature:(const char *filename, int flag)
MarkReadBuf	hdr/MarkIO.h	/^	size_t MarkReadBuf(unsigned int rfd, void *buf, size_t bytes);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int rfd, void *buf, size_t bytes)
MarkRecive	hdr/MarkMSGProtocol.h	/^	int MarkRecive(void* Data, char flag, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:public	signature:(void* Data, char flag, const unsigned int fd)
MarkSend	hdr/MarkMSGProtocol.h	/^	int MarkSend(void* Data, char flag, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:public	signature:(void* Data, char flag, const unsigned int fd)
MarkServer_t	hdr/MarkServer.h	/^	MarkServer_t();$/;"	p	class:MarkServer_t	access:public	signature:()
MarkServer_t	hdr/MarkServer.h	/^class MarkServer_t {$/;"	c
MarkServer_t::MarkServer_t	hdr/MarkServer.h	/^	MarkServer_t();$/;"	p	class:MarkServer_t	access:public	signature:()
MarkServer_t::MarkStartServer	hdr/MarkServer.h	/^	void MarkStartServer(void);$/;"	p	class:MarkServer_t	access:public	signature:(void)
MarkServer_t::~MarkServer_t	hdr/MarkServer.h	/^	virtual ~MarkServer_t();$/;"	p	class:MarkServer_t	access:public	signature:()
MarkStartClient	hdr/MarkClient.h	/^	void MarkStartClient();$/;"	p	class:MarkClient_t	access:public	signature:()
MarkStartClient	src/MarkClient.cpp	/^ void MarkClient_t::MarkStartClient()$/;"	f	class:MarkClient_t	signature:()
MarkStartServer	hdr/MarkServer.h	/^	void MarkStartServer(void);$/;"	p	class:MarkServer_t	access:public	signature:(void)
MarkThreadCreate	hdr/MarkThreads.h	/^	int MarkThreadCreate(MarkMSGTypes_t* MTypes);$/;"	p	class:MarkThreads_t	access:public	signature:(MarkMSGTypes_t* MTypes)
MarkThreadFunctions_t	hdr/MarkThreadFunctions.h	/^	MarkThreadFunctions_t();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
MarkThreadFunctions_t	hdr/MarkThreadFunctions.h	/^class MarkThreadFunctions_t : public MarkThreads_t $/;"	c	inherits:MarkThreads_t
MarkThreadFunctions_t::MarkThreadFunctions_t	hdr/MarkThreadFunctions.h	/^	MarkThreadFunctions_t();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
MarkThreadFunctions_t::RunThread	hdr/MarkThreadFunctions.h	/^	void RunThread();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
MarkThreadFunctions_t::~MarkThreadFunctions_t	hdr/MarkThreadFunctions.h	/^	virtual ~MarkThreadFunctions_t();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
MarkThreads_t	hdr/MarkThreads.h	/^	MarkThreads_t ();$/;"	p	class:MarkThreads_t	access:public	signature:()
MarkThreads_t	hdr/MarkThreads.h	/^	MarkThreads_t(const MarkThreads_t& copy);$/;"	p	class:MarkThreads_t	access:private	signature:(const MarkThreads_t& copy)
MarkThreads_t	hdr/MarkThreads.h	/^class MarkThreads_t {$/;"	c
MarkThreads_t::MThreadFunction	hdr/MarkThreads.h	/^	static	void *MThreadFunction(MarkMSGTypes_t* MTypes);$/;"	p	class:MarkThreads_t	access:private	signature:(MarkMSGTypes_t* MTypes)
MarkThreads_t::MarkThreadCreate	hdr/MarkThreads.h	/^	int MarkThreadCreate(MarkMSGTypes_t* MTypes);$/;"	p	class:MarkThreads_t	access:public	signature:(MarkMSGTypes_t* MTypes)
MarkThreads_t::MarkThreads_t	hdr/MarkThreads.h	/^	MarkThreads_t ();$/;"	p	class:MarkThreads_t	access:public	signature:()
MarkThreads_t::MarkThreads_t	hdr/MarkThreads.h	/^	MarkThreads_t(const MarkThreads_t& copy);$/;"	p	class:MarkThreads_t	access:private	signature:(const MarkThreads_t& copy)
MarkThreads_t::Thread	hdr/MarkThreads.h	/^	pthread_t Thread;$/;"	m	class:MarkThreads_t	access:private
MarkThreads_t::ThreadAtr	hdr/MarkThreads.h	/^	pthread_attr_t ThreadAtr;$/;"	m	class:MarkThreads_t	access:private
MarkThreads_t::~MarkThreads_t	hdr/MarkThreads.h	/^	virtual ~MarkThreads_t ();$/;"	p	class:MarkThreads_t	access:public	signature:()
MarkWriteBuf	hdr/MarkIO.h	/^	size_t MarkWriteBuf(unsigned int wfd, void *buf, size_t bytes);$/;"	p	class:MarkIO_t	access:public	signature:(unsigned int wfd, void *buf, size_t bytes)
Masocket	hdr/MarkMSGTypes.h	/^	unsigned int Masocket;$/;"	m	class:MarkMSGTypes_t	access:private
Mffd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
Minfd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
Moutfd	hdr/MarkIO.h	/^	int Mffd, Minfd, Moutfd;$/;"	m	class:MarkIO_t	access:private
Mreadbytes	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
Mwritebytes	hdr/MarkIO.h	/^	size_t Mreadbytes, Mwritebytes, MarkIOBuffer;$/;"	m	class:MarkIO_t	access:private
NOSOCK	hdr/protocol.h	41;"	d
OBJ	Makefile	/^OBJ=.\/obj$/;"	m
PROTOCOL_H	hdr/protocol.h	27;"	d
PassiveSocket	hdr/protocol.h	/^		int PassiveSocket(const char* service, const char* transport, int qlen);$/;"	p	class:Protocol	access:private	signature:(const char* service, const char* transport, int qlen)
PassiveTCP	hdr/protocol.h	/^		int PassiveTCP(const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* service)
PassiveUDP	hdr/protocol.h	/^		int PassiveUDP(const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* service)
Protocol	hdr/protocol.h	/^		Protocol();$/;"	p	class:Protocol	access:public	signature:()
Protocol	hdr/protocol.h	/^class Protocol$/;"	c
Protocol::ConnectSocket	hdr/protocol.h	/^		int ConnectSocket(const char* host, const char* service, const char* transport);$/;"	p	class:Protocol	access:private	signature:(const char* host, const char* service, const char* transport)
Protocol::ConnectTCP	hdr/protocol.h	/^		int ConnectTCP(const char* host, const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* host, const char* service)
Protocol::ConnectUDP	hdr/protocol.h	/^		int ConnectUDP(const char* host, const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* host, const char* service)
Protocol::GetTCP	hdr/protocol.h	/^		int GetTCP(struct ServiceInfo *psv);$/;"	p	class:Protocol	access:public	signature:(struct ServiceInfo *psv)
Protocol::MSInfo	hdr/protocol.h	/^		ServiceInfo MSInfo;$/;"	m	class:Protocol	access:public
Protocol::PassiveSocket	hdr/protocol.h	/^		int PassiveSocket(const char* service, const char* transport, int qlen);$/;"	p	class:Protocol	access:private	signature:(const char* service, const char* transport, int qlen)
Protocol::PassiveTCP	hdr/protocol.h	/^		int PassiveTCP(const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* service)
Protocol::PassiveUDP	hdr/protocol.h	/^		int PassiveUDP(const char* service);$/;"	p	class:Protocol	access:public	signature:(const char* service)
Protocol::Protocol	hdr/protocol.h	/^		Protocol();$/;"	p	class:Protocol	access:public	signature:()
Protocol::ServiceInfo	hdr/protocol.h	/^		struct ServiceInfo{$/;"	s	class:Protocol	access:public
Protocol::ServiceInfo::sv_name	hdr/protocol.h	/^			char *sv_name;$/;"	m	struct:Protocol::ServiceInfo	access:public
Protocol::ServiceInfo::sv_sock	hdr/protocol.h	/^			int sv_sock;$/;"	m	struct:Protocol::ServiceInfo	access:public
Protocol::ServiceInfo::sv_useTCP	hdr/protocol.h	/^			char sv_useTCP;$/;"	m	struct:Protocol::ServiceInfo	access:public
Protocol::alen	hdr/protocol.h	/^		unsigned int alen, asocket;$/;"	m	class:Protocol	access:private
Protocol::asocket	hdr/protocol.h	/^		unsigned int alen, asocket;$/;"	m	class:Protocol	access:private
Protocol::errexit	hdr/protocol.h	/^		int errexit(const char *format,...);$/;"	p	class:Protocol	access:public	signature:(const char *format,...)
Protocol::errno	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
Protocol::fsin	hdr/protocol.h	/^		struct sockaddr_in sin, fsin;$/;"	m	class:Protocol	typeref:struct:Protocol::	access:private
Protocol::phe	hdr/protocol.h	/^		struct hostent *phe;$/;"	m	class:Protocol	typeref:struct:Protocol::hostent	access:private
Protocol::portbase	hdr/protocol.h	/^		unsigned short portbase;$/;"	m	class:Protocol	access:private
Protocol::ppe	hdr/protocol.h	/^		struct protoent *ppe;$/;"	m	class:Protocol	typeref:struct:Protocol::protoent	access:private
Protocol::pse	hdr/protocol.h	/^		struct servent *pse;$/;"	m	class:Protocol	typeref:struct:Protocol::servent	access:private
Protocol::s	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
Protocol::sin	hdr/protocol.h	/^		struct sockaddr_in sin, fsin;$/;"	m	class:Protocol	typeref:struct:Protocol::sockaddr_in	access:private
Protocol::type	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
Protocol::~Protocol	hdr/protocol.h	/^		~Protocol();$/;"	p	class:Protocol	access:public	signature:()
QLEN	hdr/protocol.h	36;"	d
Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const MarkCalcData_t* MData, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkCalcData_t* MData, const unsigned int fd)
Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const MarkClInfo_t* MClientInfo, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkClInfo_t* MClientInfo, const unsigned int fd)
Recive	hdr/MarkMSGProtocol.h	/^	int Recive(const unsigned int MsgNum, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const unsigned int MsgNum, const unsigned int fd)
RunThread	hdr/MarkThreadFunctions.h	/^	void RunThread();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
SHUTDOWN	hdr/MarkMSGTypes.h	/^	enum  MarkClientMsg_t { GETMETASK, GETNEWPART, CLDONE, CLFAILURE, SHUTDOWN };$/;"	e	enum:MarkMSGTypes_t::MarkClientMsg_t
SRC	Makefile	/^SRC=.\/src$/;"	m
SVPORT	hdr/protocol.h	37;"	d
Send	hdr/MarkMSGProtocol.h	/^	int Send(const MarkCalcData_t* MData, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkCalcData_t* MData, const unsigned int fd)
Send	hdr/MarkMSGProtocol.h	/^	int Send(const MarkClInfo_t* MClientInfo, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const MarkClInfo_t* MClientInfo, const unsigned int fd)
Send	hdr/MarkMSGProtocol.h	/^	int Send(const unsigned int MsgNum, const unsigned int fd);$/;"	p	class:MarkMSGProtocol_t	access:private	signature:(const unsigned int MsgNum, const unsigned int fd)
ServiceInfo	hdr/protocol.h	/^		struct ServiceInfo{$/;"	s	class:Protocol	access:public
TASKPATH	hdr/MarkCalcData.h	33;"	d
TCP	hdr/protocol.h	42;"	d
TCP_SERV	hdr/protocol.h	40;"	d
Thread	hdr/MarkThreads.h	/^	pthread_t Thread;$/;"	m	class:MarkThreads_t	access:private
ThreadAtr	hdr/MarkThreads.h	/^	pthread_attr_t ThreadAtr;$/;"	m	class:MarkThreads_t	access:private
UDP	hdr/protocol.h	43;"	d
UDP_SERV	hdr/protocol.h	39;"	d
alen	hdr/protocol.h	/^		unsigned int alen, asocket;$/;"	m	class:Protocol	access:private
asocket	hdr/protocol.h	/^		unsigned int alen, asocket;$/;"	m	class:Protocol	access:private
buffer	hdr/MarkIO.h	/^	char buffer[BUFSIZE+1];$/;"	m	class:MarkIO_t	access:private
errexit	hdr/MarkIO.h	/^	void errexit(const char* format, ...);$/;"	p	class:MarkIO_t	access:public	signature:(const char* format, ...)
errexit	hdr/protocol.h	/^		int errexit(const char *format,...);$/;"	p	class:Protocol	access:public	signature:(const char *format,...)
errno	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
fsin	hdr/protocol.h	/^		struct sockaddr_in sin, fsin;$/;"	m	class:Protocol	typeref:struct:Protocol::	access:private
main	src/main.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
phe	hdr/protocol.h	/^		struct hostent *phe;$/;"	m	class:Protocol	typeref:struct:Protocol::hostent	access:private
portbase	hdr/protocol.h	/^		unsigned short portbase;$/;"	m	class:Protocol	access:private
ppe	hdr/protocol.h	/^		struct protoent *ppe;$/;"	m	class:Protocol	typeref:struct:Protocol::protoent	access:private
pse	hdr/protocol.h	/^		struct servent *pse;$/;"	m	class:Protocol	typeref:struct:Protocol::servent	access:private
s	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
sin	hdr/protocol.h	/^		struct sockaddr_in sin, fsin;$/;"	m	class:Protocol	typeref:struct:Protocol::sockaddr_in	access:private
sv_name	hdr/protocol.h	/^			char *sv_name;$/;"	m	struct:Protocol::ServiceInfo	access:public
sv_sock	hdr/protocol.h	/^			int sv_sock;$/;"	m	struct:Protocol::ServiceInfo	access:public
sv_useTCP	hdr/protocol.h	/^			char sv_useTCP;$/;"	m	struct:Protocol::ServiceInfo	access:public
type	hdr/protocol.h	/^		int s, type, errno;$/;"	m	class:Protocol	access:private
~MarkCalcData_t	hdr/MarkCalcData.h	/^	virtual ~MarkCalcData_t ();$/;"	p	class:MarkCalcData_t	access:public	signature:()
~MarkClInfo_t	hdr/MarkClInfo.h	/^	virtual ~MarkClInfo_t();$/;"	p	class:MarkClInfo_t	access:public	signature:()
~MarkClient_t	hdr/MarkClient.h	/^	virtual ~MarkClient_t ();$/;"	p	class:MarkClient_t	access:public	signature:()
~MarkClient_t	src/MarkClient.cpp	/^ MarkClient_t::~MarkClient_t ()$/;"	f	class:MarkClient_t	signature:()
~MarkIO_t	hdr/MarkIO.h	/^	virtual ~MarkIO_t ();$/;"	p	class:MarkIO_t	access:public	signature:()
~MarkMSGProtocol_t	hdr/MarkMSGProtocol.h	/^	virtual ~MarkMSGProtocol_t();$/;"	p	class:MarkMSGProtocol_t	access:public	signature:()
~MarkMSGTypes_t	hdr/MarkMSGTypes.h	/^	virtual ~MarkMSGTypes_t();$/;"	p	class:MarkMSGTypes_t	access:public	signature:()
~MarkServer_t	hdr/MarkServer.h	/^	virtual ~MarkServer_t();$/;"	p	class:MarkServer_t	access:public	signature:()
~MarkThreadFunctions_t	hdr/MarkThreadFunctions.h	/^	virtual ~MarkThreadFunctions_t();$/;"	p	class:MarkThreadFunctions_t	access:public	signature:()
~MarkThreads_t	hdr/MarkThreads.h	/^	virtual ~MarkThreads_t ();$/;"	p	class:MarkThreads_t	access:public	signature:()
~Protocol	hdr/protocol.h	/^		~Protocol();$/;"	p	class:Protocol	access:public	signature:()
